function [qx_cor,qy_cor,parameters,M] = correctReciprocalData(qx,qy,peak_lit,peak_exp)

% ----- function handles -----
R_fh = ...
    @(gamma) ...
    [cos(gamma),-sin(gamma);sin(gamma),cos(gamma)];
    % rotation matrix in general for rotation of RSM

rho_fh = ...
    @(q_lit,q_exp) ...
    norm(q_lit)/norm(q_exp);
    % rotation stretch

gamma_fh = ...
    @(q_lit,q_exp) ...
    acos( ...
        dot(q_lit,q_exp) / ...
        (norm(q_lit)*norm(q_exp)) ...
    );
    % rotation angle in radians to plug into R_fh

crossProduct_fh = ...
    @(x,y) ...
    x(1)*y(2)-x(2)*y(1);
    % needed for handedness of rotation

drehsinn_fh = ...
    @(q_lit,q_exp) ...
    sign(crossProduct_fh(q_exp,q_lit));
    % clockwise (-1) or counterclockwise (+1)

correction_matrix_fh = ...
    @(q_lit,q_exp) ...
    rho_fh(q_lit,q_exp) * ...
    R_fh(...
        drehsinn_fh(q_lit,q_exp) * ...
        gamma_fh(q_lit,q_exp) ...
        );
    % corrects RSM data when applied to vector 

M = correction_matrix_fh(peak_lit,peak_exp);

qx_cor = nan(size(qx));
qy_cor = nan(size(qy));

for i = 1:numel(qx)
    q_cor = M * [qx(i) ; qy(i)];
    qx_cor(i) = q_cor(1);
    qy_cor(i) = q_cor(2);
end

parameters = [rho_fh(peak_lit,peak_exp),...
    drehsinn_fh(peak_lit,peak_exp)*gamma_fh(peak_lit,peak_exp)];

end

